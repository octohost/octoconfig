#!/usr/bin/env ruby
require 'gli'
require 'octoconfig'
require 'open3'
require 'erb'

include GLI::App

program_desc 'Setup octohost config files through Consul data.'

version Octoconfig::VERSION

desc 'Verbose.'
switch [:v,:verbose]

desc 'Daemon to update.'
default_value 'proxy'
arg_name 'daemon'
flag [:d,:daemon]

desc 'Config file to update.'
default_value '/etc/nginx/containers.conf'
arg_name 'config'
flag [:c,:config]

desc 'Command to get the service catalog.'
default_value 'octo services:catalog'
arg_name 'services'
flag [:s,:services]

desc 'Command to reload the daemon.'
default_value 'service proxy reload'
arg_name 'reload'
flag [:r,:reload]

desc 'Tag to look for in the service catalog.'
default_value 'http'
arg_name 'tag'
flag [:t,:tag]

desc 'Update the config for a {daemon}'
arg_name 'update'
command :update do |c|

  c.action do |global_options,options,args|

    # Get the services.
    puts "Getting the services."

    services = Services.new
    services.get(global_options[:services], global_options[:tag])

    # Load the ./lib/daemons/global_options[:daemon]/global_options[:tag] file.
    filename = "../lib/daemons/#{global_options[:daemon]}/#{global_options[:tag]}.rb"
    require_relative filename

    template = Template.new(services, global_options[:daemon], global_options[:tag])
    template_content = template.render

    # Update the config at global_options[:config]
    File.open(global_options[:config], 'w') { |file| file.write(template_content) }

    # Restart the daemon.
    `#{global_options[:reload]}`

    puts "Config: #{global_options[:config]} for #{global_options[:daemon]} daemon with #{global_options[:tag]} tag updated."
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
